import { Geometry } from 'luma.gl';
export default class Arrow2DGeometry extends Geometry {
  constructor(opts = {}) {
    super(Object.assign({}, opts, {
      attributes: getArrowAttributes(opts)
    }));
  }

}

function getArrowAttributes({
  length = 1,
  headSize = 0.2,
  tailWidth = 0.05,
  tailStart = 0.05
}) {
  const texCoords = [// HEAD
  0.5, 1.0, 0, 0.5 - headSize / 2, 1.0 - headSize, 0, 0.5 + headSize / 2, 1.0 - headSize, 0, 0.5 - tailWidth / 2, tailStart, 0, 0.5 + tailWidth / 2, 1.0 - headSize, 0, 0.5 + tailWidth / 2, tailStart, 0, 0.5 - tailWidth / 2, tailStart, 0, 0.5 - tailWidth / 2, 1.0 - headSize, 0, 0.5 + tailWidth / 2, 1.0 - headSize, 0];
  const normals = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]; // Center and scale

  const positions = new Array(texCoords.length);

  for (let i = 0; i < texCoords.length / 3; i++) {
    const i3 = i * 3;
    positions[i3 + 0] = (texCoords[i3 + 0] - 0.5) * length;
    positions[i3 + 1] = (texCoords[i3 + 1] - 0.5) * length;
    positions[i3 + 2] = 0;
  }

  return {
    positions: new Float32Array(positions),
    normals: new Float32Array(normals),
    texCoords: new Float32Array(texCoords)
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXRoLW1hcmtlci1sYXllci9hcnJvdy0yZC1nZW9tZXRyeS5qcyJdLCJuYW1lcyI6WyJHZW9tZXRyeSIsIkFycm93MkRHZW9tZXRyeSIsImNvbnN0cnVjdG9yIiwib3B0cyIsIk9iamVjdCIsImFzc2lnbiIsImF0dHJpYnV0ZXMiLCJnZXRBcnJvd0F0dHJpYnV0ZXMiLCJsZW5ndGgiLCJoZWFkU2l6ZSIsInRhaWxXaWR0aCIsInRhaWxTdGFydCIsInRleENvb3JkcyIsIm5vcm1hbHMiLCJwb3NpdGlvbnMiLCJBcnJheSIsImkiLCJpMyIsIkZsb2F0MzJBcnJheSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUUEsUUFBUixRQUF1QixTQUF2QjtBQUVBLGVBQWUsTUFBTUMsZUFBTixTQUE4QkQsUUFBOUIsQ0FBdUM7QUFDcERFLGNBQVlDLE9BQU8sRUFBbkIsRUFBdUI7QUFDckIsVUFDRUMsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JGLElBQWxCLEVBQXdCO0FBQ3RCRyxrQkFBWUMsbUJBQW1CSixJQUFuQjtBQURVLEtBQXhCLENBREY7QUFLRDs7QUFQbUQ7O0FBVXRELFNBQVNJLGtCQUFULENBQTRCO0FBQUNDLFdBQVMsQ0FBVjtBQUFhQyxhQUFXLEdBQXhCO0FBQTZCQyxjQUFZLElBQXpDO0FBQStDQyxjQUFZO0FBQTNELENBQTVCLEVBQThGO0FBQzVGLFFBQU1DLFlBQVksQ0FDaEI7QUFDQSxLQUZnQixFQUdoQixHQUhnQixFQUloQixDQUpnQixFQUtoQixNQUFNSCxXQUFXLENBTEQsRUFNaEIsTUFBTUEsUUFOVSxFQU9oQixDQVBnQixFQVFoQixNQUFNQSxXQUFXLENBUkQsRUFTaEIsTUFBTUEsUUFUVSxFQVVoQixDQVZnQixFQVloQixNQUFNQyxZQUFZLENBWkYsRUFhaEJDLFNBYmdCLEVBY2hCLENBZGdCLEVBZWhCLE1BQU1ELFlBQVksQ0FmRixFQWdCaEIsTUFBTUQsUUFoQlUsRUFpQmhCLENBakJnQixFQWtCaEIsTUFBTUMsWUFBWSxDQWxCRixFQW1CaEJDLFNBbkJnQixFQW9CaEIsQ0FwQmdCLEVBc0JoQixNQUFNRCxZQUFZLENBdEJGLEVBdUJoQkMsU0F2QmdCLEVBd0JoQixDQXhCZ0IsRUF5QmhCLE1BQU1ELFlBQVksQ0F6QkYsRUEwQmhCLE1BQU1ELFFBMUJVLEVBMkJoQixDQTNCZ0IsRUE0QmhCLE1BQU1DLFlBQVksQ0E1QkYsRUE2QmhCLE1BQU1ELFFBN0JVLEVBOEJoQixDQTlCZ0IsQ0FBbEI7QUFpQ0EsUUFBTUksVUFBVSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLENBQW5CLEVBQXNCLENBQXRCLEVBQXlCLENBQXpCLEVBQTRCLENBQTVCLEVBQStCLENBQS9CLEVBQWtDLENBQWxDLEVBQXFDLENBQXJDLEVBQXdDLENBQXhDLEVBQTJDLENBQTNDLEVBQThDLENBQTlDLEVBQWlELENBQWpELEVBQW9ELENBQXBELEVBQXVELENBQXZELEVBQTBELENBQTFELEVBQTZELENBQTdELEVBQWdFLENBQWhFLEVBQW1FLENBQW5FLEVBQXNFLENBQXRFLEVBQXlFLENBQXpFLEVBQTRFLENBQTVFLEVBQStFLENBQS9FLENBQWhCLENBbEM0RixDQW9DNUY7O0FBQ0EsUUFBTUMsWUFBWSxJQUFJQyxLQUFKLENBQVVILFVBQVVKLE1BQXBCLENBQWxCOztBQUNBLE9BQUssSUFBSVEsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSixVQUFVSixNQUFWLEdBQW1CLENBQXZDLEVBQTBDUSxHQUExQyxFQUErQztBQUM3QyxVQUFNQyxLQUFLRCxJQUFJLENBQWY7QUFDQUYsY0FBVUcsS0FBSyxDQUFmLElBQW9CLENBQUNMLFVBQVVLLEtBQUssQ0FBZixJQUFvQixHQUFyQixJQUE0QlQsTUFBaEQ7QUFDQU0sY0FBVUcsS0FBSyxDQUFmLElBQW9CLENBQUNMLFVBQVVLLEtBQUssQ0FBZixJQUFvQixHQUFyQixJQUE0QlQsTUFBaEQ7QUFDQU0sY0FBVUcsS0FBSyxDQUFmLElBQW9CLENBQXBCO0FBQ0Q7O0FBQ0QsU0FBTztBQUNMSCxlQUFXLElBQUlJLFlBQUosQ0FBaUJKLFNBQWpCLENBRE47QUFFTEQsYUFBUyxJQUFJSyxZQUFKLENBQWlCTCxPQUFqQixDQUZKO0FBR0xELGVBQVcsSUFBSU0sWUFBSixDQUFpQk4sU0FBakI7QUFITixHQUFQO0FBS0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0dlb21ldHJ5fSBmcm9tICdsdW1hLmdsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXJyb3cyREdlb21ldHJ5IGV4dGVuZHMgR2VvbWV0cnkge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihcbiAgICAgIE9iamVjdC5hc3NpZ24oe30sIG9wdHMsIHtcbiAgICAgICAgYXR0cmlidXRlczogZ2V0QXJyb3dBdHRyaWJ1dGVzKG9wdHMpXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QXJyb3dBdHRyaWJ1dGVzKHtsZW5ndGggPSAxLCBoZWFkU2l6ZSA9IDAuMiwgdGFpbFdpZHRoID0gMC4wNSwgdGFpbFN0YXJ0ID0gMC4wNX0pIHtcbiAgY29uc3QgdGV4Q29vcmRzID0gW1xuICAgIC8vIEhFQURcbiAgICAwLjUsXG4gICAgMS4wLFxuICAgIDAsXG4gICAgMC41IC0gaGVhZFNpemUgLyAyLFxuICAgIDEuMCAtIGhlYWRTaXplLFxuICAgIDAsXG4gICAgMC41ICsgaGVhZFNpemUgLyAyLFxuICAgIDEuMCAtIGhlYWRTaXplLFxuICAgIDAsXG5cbiAgICAwLjUgLSB0YWlsV2lkdGggLyAyLFxuICAgIHRhaWxTdGFydCxcbiAgICAwLFxuICAgIDAuNSArIHRhaWxXaWR0aCAvIDIsXG4gICAgMS4wIC0gaGVhZFNpemUsXG4gICAgMCxcbiAgICAwLjUgKyB0YWlsV2lkdGggLyAyLFxuICAgIHRhaWxTdGFydCxcbiAgICAwLFxuXG4gICAgMC41IC0gdGFpbFdpZHRoIC8gMixcbiAgICB0YWlsU3RhcnQsXG4gICAgMCxcbiAgICAwLjUgLSB0YWlsV2lkdGggLyAyLFxuICAgIDEuMCAtIGhlYWRTaXplLFxuICAgIDAsXG4gICAgMC41ICsgdGFpbFdpZHRoIC8gMixcbiAgICAxLjAgLSBoZWFkU2l6ZSxcbiAgICAwXG4gIF07XG5cbiAgY29uc3Qgbm9ybWFscyA9IFswLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxXTtcblxuICAvLyBDZW50ZXIgYW5kIHNjYWxlXG4gIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBBcnJheSh0ZXhDb29yZHMubGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXhDb29yZHMubGVuZ3RoIC8gMzsgaSsrKSB7XG4gICAgY29uc3QgaTMgPSBpICogMztcbiAgICBwb3NpdGlvbnNbaTMgKyAwXSA9ICh0ZXhDb29yZHNbaTMgKyAwXSAtIDAuNSkgKiBsZW5ndGg7XG4gICAgcG9zaXRpb25zW2kzICsgMV0gPSAodGV4Q29vcmRzW2kzICsgMV0gLSAwLjUpICogbGVuZ3RoO1xuICAgIHBvc2l0aW9uc1tpMyArIDJdID0gMDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHBvc2l0aW9uczogbmV3IEZsb2F0MzJBcnJheShwb3NpdGlvbnMpLFxuICAgIG5vcm1hbHM6IG5ldyBGbG9hdDMyQXJyYXkobm9ybWFscyksXG4gICAgdGV4Q29vcmRzOiBuZXcgRmxvYXQzMkFycmF5KHRleENvb3JkcylcbiAgfTtcbn1cbiJdfQ==