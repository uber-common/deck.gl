import { Vector3, clamp } from 'math.gl'; // Return the closest point on a line segment

export function getClosestPointOnLine({
  p,
  p1,
  p2,
  clampToLine = true
}) {
  const lineVector = new Vector3(p2).subtract(p1);
  const pointVector = new Vector3(p).subtract(p1);
  let dotProduct = lineVector.dot(pointVector);

  if (clampToLine) {
    dotProduct = clamp(dotProduct, 0, 1);
  }

  return lineVector.lerp(dotProduct);
} // Return the closest point on a line segment

export function getClosestPointOnPolyline({
  p,
  points
}) {
  p = new Vector3(p);
  let pClosest = null;
  let distanceSquared = Infinity;
  let index = -1;

  for (let i = 0; i < points.length - 1; ++i) {
    const p1 = points[i];
    const p2 = points[i + 1];
    const pClosestOnLine = getClosestPointOnLine({
      p,
      p1,
      p2
    });
    const distanceToLineSquared = p.distanceSquared(pClosestOnLine);

    if (distanceToLineSquared < distanceSquared) {
      distanceSquared = distanceToLineSquared;
      pClosest = pClosestOnLine;
      index = i;
    }
  }

  return {
    point: pClosest,
    index,
    p1: points[index],
    p2: points[index + 1],
    distanceSquared,
    distance: Math.sqrt(distanceSquared)
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXRoLW1hcmtlci1sYXllci9wb2x5bGluZS5qcyJdLCJuYW1lcyI6WyJWZWN0b3IzIiwiY2xhbXAiLCJnZXRDbG9zZXN0UG9pbnRPbkxpbmUiLCJwIiwicDEiLCJwMiIsImNsYW1wVG9MaW5lIiwibGluZVZlY3RvciIsInN1YnRyYWN0IiwicG9pbnRWZWN0b3IiLCJkb3RQcm9kdWN0IiwiZG90IiwibGVycCIsImdldENsb3Nlc3RQb2ludE9uUG9seWxpbmUiLCJwb2ludHMiLCJwQ2xvc2VzdCIsImRpc3RhbmNlU3F1YXJlZCIsIkluZmluaXR5IiwiaW5kZXgiLCJpIiwibGVuZ3RoIiwicENsb3Nlc3RPbkxpbmUiLCJkaXN0YW5jZVRvTGluZVNxdWFyZWQiLCJwb2ludCIsImRpc3RhbmNlIiwiTWF0aCIsInNxcnQiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVFBLE9BQVIsRUFBaUJDLEtBQWpCLFFBQTZCLFNBQTdCLEMsQ0FFQTs7QUFDQSxPQUFPLFNBQVNDLHFCQUFULENBQStCO0FBQUNDLEdBQUQ7QUFBSUMsSUFBSjtBQUFRQyxJQUFSO0FBQVlDLGdCQUFjO0FBQTFCLENBQS9CLEVBQWdFO0FBQ3JFLFFBQU1DLGFBQWEsSUFBSVAsT0FBSixDQUFZSyxFQUFaLEVBQWdCRyxRQUFoQixDQUF5QkosRUFBekIsQ0FBbkI7QUFDQSxRQUFNSyxjQUFjLElBQUlULE9BQUosQ0FBWUcsQ0FBWixFQUFlSyxRQUFmLENBQXdCSixFQUF4QixDQUFwQjtBQUNBLE1BQUlNLGFBQWFILFdBQVdJLEdBQVgsQ0FBZUYsV0FBZixDQUFqQjs7QUFDQSxNQUFJSCxXQUFKLEVBQWlCO0FBQ2ZJLGlCQUFhVCxNQUFNUyxVQUFOLEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLENBQWI7QUFDRDs7QUFDRCxTQUFPSCxXQUFXSyxJQUFYLENBQWdCRixVQUFoQixDQUFQO0FBQ0QsQyxDQUVEOztBQUNBLE9BQU8sU0FBU0cseUJBQVQsQ0FBbUM7QUFBQ1YsR0FBRDtBQUFJVztBQUFKLENBQW5DLEVBQWdEO0FBQ3JEWCxNQUFJLElBQUlILE9BQUosQ0FBWUcsQ0FBWixDQUFKO0FBQ0EsTUFBSVksV0FBVyxJQUFmO0FBQ0EsTUFBSUMsa0JBQWtCQyxRQUF0QjtBQUNBLE1BQUlDLFFBQVEsQ0FBQyxDQUFiOztBQUNBLE9BQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJTCxPQUFPTSxNQUFQLEdBQWdCLENBQXBDLEVBQXVDLEVBQUVELENBQXpDLEVBQTRDO0FBQzFDLFVBQU1mLEtBQUtVLE9BQU9LLENBQVAsQ0FBWDtBQUNBLFVBQU1kLEtBQUtTLE9BQU9LLElBQUksQ0FBWCxDQUFYO0FBQ0EsVUFBTUUsaUJBQWlCbkIsc0JBQXNCO0FBQUNDLE9BQUQ7QUFBSUMsUUFBSjtBQUFRQztBQUFSLEtBQXRCLENBQXZCO0FBQ0EsVUFBTWlCLHdCQUF3Qm5CLEVBQUVhLGVBQUYsQ0FBa0JLLGNBQWxCLENBQTlCOztBQUNBLFFBQUlDLHdCQUF3Qk4sZUFBNUIsRUFBNkM7QUFDM0NBLHdCQUFrQk0scUJBQWxCO0FBQ0FQLGlCQUFXTSxjQUFYO0FBQ0FILGNBQVFDLENBQVI7QUFDRDtBQUNGOztBQUNELFNBQU87QUFDTEksV0FBT1IsUUFERjtBQUVMRyxTQUZLO0FBR0xkLFFBQUlVLE9BQU9JLEtBQVAsQ0FIQztBQUlMYixRQUFJUyxPQUFPSSxRQUFRLENBQWYsQ0FKQztBQUtMRixtQkFMSztBQU1MUSxjQUFVQyxLQUFLQyxJQUFMLENBQVVWLGVBQVY7QUFOTCxHQUFQO0FBUUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1ZlY3RvcjMsIGNsYW1wfSBmcm9tICdtYXRoLmdsJztcblxuLy8gUmV0dXJuIHRoZSBjbG9zZXN0IHBvaW50IG9uIGEgbGluZSBzZWdtZW50XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2xvc2VzdFBvaW50T25MaW5lKHtwLCBwMSwgcDIsIGNsYW1wVG9MaW5lID0gdHJ1ZX0pIHtcbiAgY29uc3QgbGluZVZlY3RvciA9IG5ldyBWZWN0b3IzKHAyKS5zdWJ0cmFjdChwMSk7XG4gIGNvbnN0IHBvaW50VmVjdG9yID0gbmV3IFZlY3RvcjMocCkuc3VidHJhY3QocDEpO1xuICBsZXQgZG90UHJvZHVjdCA9IGxpbmVWZWN0b3IuZG90KHBvaW50VmVjdG9yKTtcbiAgaWYgKGNsYW1wVG9MaW5lKSB7XG4gICAgZG90UHJvZHVjdCA9IGNsYW1wKGRvdFByb2R1Y3QsIDAsIDEpO1xuICB9XG4gIHJldHVybiBsaW5lVmVjdG9yLmxlcnAoZG90UHJvZHVjdCk7XG59XG5cbi8vIFJldHVybiB0aGUgY2xvc2VzdCBwb2ludCBvbiBhIGxpbmUgc2VnbWVudFxuZXhwb3J0IGZ1bmN0aW9uIGdldENsb3Nlc3RQb2ludE9uUG9seWxpbmUoe3AsIHBvaW50c30pIHtcbiAgcCA9IG5ldyBWZWN0b3IzKHApO1xuICBsZXQgcENsb3Nlc3QgPSBudWxsO1xuICBsZXQgZGlzdGFuY2VTcXVhcmVkID0gSW5maW5pdHk7XG4gIGxldCBpbmRleCA9IC0xO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGggLSAxOyArK2kpIHtcbiAgICBjb25zdCBwMSA9IHBvaW50c1tpXTtcbiAgICBjb25zdCBwMiA9IHBvaW50c1tpICsgMV07XG4gICAgY29uc3QgcENsb3Nlc3RPbkxpbmUgPSBnZXRDbG9zZXN0UG9pbnRPbkxpbmUoe3AsIHAxLCBwMn0pO1xuICAgIGNvbnN0IGRpc3RhbmNlVG9MaW5lU3F1YXJlZCA9IHAuZGlzdGFuY2VTcXVhcmVkKHBDbG9zZXN0T25MaW5lKTtcbiAgICBpZiAoZGlzdGFuY2VUb0xpbmVTcXVhcmVkIDwgZGlzdGFuY2VTcXVhcmVkKSB7XG4gICAgICBkaXN0YW5jZVNxdWFyZWQgPSBkaXN0YW5jZVRvTGluZVNxdWFyZWQ7XG4gICAgICBwQ2xvc2VzdCA9IHBDbG9zZXN0T25MaW5lO1xuICAgICAgaW5kZXggPSBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHBvaW50OiBwQ2xvc2VzdCxcbiAgICBpbmRleCxcbiAgICBwMTogcG9pbnRzW2luZGV4XSxcbiAgICBwMjogcG9pbnRzW2luZGV4ICsgMV0sXG4gICAgZGlzdGFuY2VTcXVhcmVkLFxuICAgIGRpc3RhbmNlOiBNYXRoLnNxcnQoZGlzdGFuY2VTcXVhcmVkKVxuICB9O1xufVxuIl19