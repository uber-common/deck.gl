// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
import { IconLayer } from '@deck.gl/layers';
import vs from './advanced-text-layer-vertex.glsl';
import fs from './advanced-text-layer-fragment.glsl'; // TODO: provide more props

const defaultProps = IconLayer.defaultProps;
export default class TextMultiIconLayer extends IconLayer {
  getShaders() {
    return Object.assign({}, super.getShaders(), {
      vs,
      fs
    });
  }

  draw({
    uniforms
  }) {
    const _this$props = this.props,
          fontSmoothing = _this$props.fontSmoothing,
          sizeScale = _this$props.sizeScale;
    super.draw({
      uniforms: Object.assign({}, uniforms, {
        // TODO: handle for individual sizes using this.props.getSize()
        smoothing: sizeScale > 0 ? fontSmoothing / sizeScale : 0
      })
    });
  }

  calculateInstanceOffsets(attribute) {
    const data = this.props.data;
    const value = attribute.value;
    let i = 0;

    for (const object of data) {
      value[i++] = object.x;
      value[i++] = object.y;
    }
  }

}
TextMultiIconLayer.layerName = 'TextMultiIconLayer';
TextMultiIconLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZHZhbmNlZC10ZXh0LWxheWVyL3RleHQtbXVsdGktaWNvbi1sYXllci5qcyJdLCJuYW1lcyI6WyJJY29uTGF5ZXIiLCJ2cyIsImZzIiwiZGVmYXVsdFByb3BzIiwiVGV4dE11bHRpSWNvbkxheWVyIiwiZ2V0U2hhZGVycyIsIk9iamVjdCIsImFzc2lnbiIsImRyYXciLCJ1bmlmb3JtcyIsInByb3BzIiwiZm9udFNtb290aGluZyIsInNpemVTY2FsZSIsInNtb290aGluZyIsImNhbGN1bGF0ZUluc3RhbmNlT2Zmc2V0cyIsImF0dHJpYnV0ZSIsImRhdGEiLCJ2YWx1ZSIsImkiLCJvYmplY3QiLCJ4IiwieSIsImxheWVyTmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxTQUFRQSxTQUFSLFFBQXdCLGlCQUF4QjtBQUNBLE9BQU9DLEVBQVAsTUFBZSxtQ0FBZjtBQUNBLE9BQU9DLEVBQVAsTUFBZSxxQ0FBZixDLENBRUE7O0FBQ0EsTUFBTUMsZUFBZUgsVUFBVUcsWUFBL0I7QUFFQSxlQUFlLE1BQU1DLGtCQUFOLFNBQWlDSixTQUFqQyxDQUEyQztBQUN4REssZUFBYTtBQUNYLFdBQU9DLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCLE1BQU1GLFVBQU4sRUFBbEIsRUFBc0M7QUFBQ0osUUFBRDtBQUFLQztBQUFMLEtBQXRDLENBQVA7QUFDRDs7QUFFRE0sT0FBSztBQUFDQztBQUFELEdBQUwsRUFBaUI7QUFBQSx3QkFDb0IsS0FBS0MsS0FEekI7QUFBQSxVQUNSQyxhQURRLGVBQ1JBLGFBRFE7QUFBQSxVQUNPQyxTQURQLGVBQ09BLFNBRFA7QUFHZixVQUFNSixJQUFOLENBQVc7QUFDVEMsZ0JBQVVILE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCRSxRQUFsQixFQUE0QjtBQUNwQztBQUNBSSxtQkFBV0QsWUFBWSxDQUFaLEdBQWdCRCxnQkFBZ0JDLFNBQWhDLEdBQTRDO0FBRm5CLE9BQTVCO0FBREQsS0FBWDtBQU1EOztBQUVERSwyQkFBeUJDLFNBQXpCLEVBQW9DO0FBQUEsVUFDM0JDLElBRDJCLEdBQ25CLEtBQUtOLEtBRGMsQ0FDM0JNLElBRDJCO0FBQUEsVUFFM0JDLEtBRjJCLEdBRWxCRixTQUZrQixDQUUzQkUsS0FGMkI7QUFHbEMsUUFBSUMsSUFBSSxDQUFSOztBQUNBLFNBQUssTUFBTUMsTUFBWCxJQUFxQkgsSUFBckIsRUFBMkI7QUFDekJDLFlBQU1DLEdBQU4sSUFBYUMsT0FBT0MsQ0FBcEI7QUFDQUgsWUFBTUMsR0FBTixJQUFhQyxPQUFPRSxDQUFwQjtBQUNEO0FBQ0Y7O0FBeEJ1RDtBQTJCMURqQixtQkFBbUJrQixTQUFuQixHQUErQixvQkFBL0I7QUFDQWxCLG1CQUFtQkQsWUFBbkIsR0FBa0NBLFlBQWxDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB7SWNvbkxheWVyfSBmcm9tICdAZGVjay5nbC9sYXllcnMnO1xuaW1wb3J0IHZzIGZyb20gJy4vYWR2YW5jZWQtdGV4dC1sYXllci12ZXJ0ZXguZ2xzbCc7XG5pbXBvcnQgZnMgZnJvbSAnLi9hZHZhbmNlZC10ZXh0LWxheWVyLWZyYWdtZW50Lmdsc2wnO1xuXG4vLyBUT0RPOiBwcm92aWRlIG1vcmUgcHJvcHNcbmNvbnN0IGRlZmF1bHRQcm9wcyA9IEljb25MYXllci5kZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHRNdWx0aUljb25MYXllciBleHRlbmRzIEljb25MYXllciB7XG4gIGdldFNoYWRlcnMoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN1cGVyLmdldFNoYWRlcnMoKSwge3ZzLCBmc30pO1xuICB9XG5cbiAgZHJhdyh7dW5pZm9ybXN9KSB7XG4gICAgY29uc3Qge2ZvbnRTbW9vdGhpbmcsIHNpemVTY2FsZX0gPSB0aGlzLnByb3BzO1xuXG4gICAgc3VwZXIuZHJhdyh7XG4gICAgICB1bmlmb3JtczogT2JqZWN0LmFzc2lnbih7fSwgdW5pZm9ybXMsIHtcbiAgICAgICAgLy8gVE9ETzogaGFuZGxlIGZvciBpbmRpdmlkdWFsIHNpemVzIHVzaW5nIHRoaXMucHJvcHMuZ2V0U2l6ZSgpXG4gICAgICAgIHNtb290aGluZzogc2l6ZVNjYWxlID4gMCA/IGZvbnRTbW9vdGhpbmcgLyBzaXplU2NhbGUgOiAwXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG5cbiAgY2FsY3VsYXRlSW5zdGFuY2VPZmZzZXRzKGF0dHJpYnV0ZSkge1xuICAgIGNvbnN0IHtkYXRhfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge3ZhbHVlfSA9IGF0dHJpYnV0ZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yIChjb25zdCBvYmplY3Qgb2YgZGF0YSkge1xuICAgICAgdmFsdWVbaSsrXSA9IG9iamVjdC54O1xuICAgICAgdmFsdWVbaSsrXSA9IG9iamVjdC55O1xuICAgIH1cbiAgfVxufVxuXG5UZXh0TXVsdGlJY29uTGF5ZXIubGF5ZXJOYW1lID0gJ1RleHRNdWx0aUljb25MYXllcic7XG5UZXh0TXVsdGlJY29uTGF5ZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuIl19