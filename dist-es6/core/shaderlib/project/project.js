// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import { fp32 } from 'luma.gl';
import projectShader from './project.glsl';
import projectDeprecatedShader from '../../deprecated/shaderlib/project/project-deprecated.glsl';
import { getUniformsFromViewport } from './viewport-uniforms';

var INITIAL_MODULE_OPTIONS = {};

function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_MODULE_OPTIONS;

  if (opts.viewport) {
    return getUniformsFromViewport(opts);
  }
  return {};
}

export default {
  name: 'project',
  dependencies: [fp32],
  vs: '' + projectShader + projectDeprecatedShader,
  getUniforms: getUniforms
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL3NoYWRlcmxpYi9wcm9qZWN0L3Byb2plY3QuanMiXSwibmFtZXMiOlsiZnAzMiIsInByb2plY3RTaGFkZXIiLCJwcm9qZWN0RGVwcmVjYXRlZFNoYWRlciIsImdldFVuaWZvcm1zRnJvbVZpZXdwb3J0IiwiSU5JVElBTF9NT0RVTEVfT1BUSU9OUyIsImdldFVuaWZvcm1zIiwib3B0cyIsInZpZXdwb3J0IiwibmFtZSIsImRlcGVuZGVuY2llcyIsInZzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFRQSxJQUFSLFFBQW1CLFNBQW5CO0FBQ0EsT0FBT0MsYUFBUCxNQUEwQixnQkFBMUI7QUFDQSxPQUFPQyx1QkFBUCxNQUFvQyw0REFBcEM7QUFDQSxTQUFRQyx1QkFBUixRQUFzQyxxQkFBdEM7O0FBRUEsSUFBTUMseUJBQXlCLEVBQS9COztBQUVBLFNBQVNDLFdBQVQsR0FBb0Q7QUFBQSxNQUEvQkMsSUFBK0IsdUVBQXhCRixzQkFBd0I7O0FBQ2xELE1BQUlFLEtBQUtDLFFBQVQsRUFBbUI7QUFDakIsV0FBT0osd0JBQXdCRyxJQUF4QixDQUFQO0FBQ0Q7QUFDRCxTQUFPLEVBQVA7QUFDRDs7QUFFRCxlQUFlO0FBQ2JFLFFBQU0sU0FETztBQUViQyxnQkFBYyxDQUFDVCxJQUFELENBRkQ7QUFHYlUsV0FBT1QsYUFBUCxHQUF1QkMsdUJBSFY7QUFJYkc7QUFKYSxDQUFmIiwiZmlsZSI6InByb2plY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTUgLSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtmcDMyfSBmcm9tICdsdW1hLmdsJztcbmltcG9ydCBwcm9qZWN0U2hhZGVyIGZyb20gJy4vcHJvamVjdC5nbHNsJztcbmltcG9ydCBwcm9qZWN0RGVwcmVjYXRlZFNoYWRlciBmcm9tICcuLi8uLi9kZXByZWNhdGVkL3NoYWRlcmxpYi9wcm9qZWN0L3Byb2plY3QtZGVwcmVjYXRlZC5nbHNsJztcbmltcG9ydCB7Z2V0VW5pZm9ybXNGcm9tVmlld3BvcnR9IGZyb20gJy4vdmlld3BvcnQtdW5pZm9ybXMnO1xuXG5jb25zdCBJTklUSUFMX01PRFVMRV9PUFRJT05TID0ge307XG5cbmZ1bmN0aW9uIGdldFVuaWZvcm1zKG9wdHMgPSBJTklUSUFMX01PRFVMRV9PUFRJT05TKSB7XG4gIGlmIChvcHRzLnZpZXdwb3J0KSB7XG4gICAgcmV0dXJuIGdldFVuaWZvcm1zRnJvbVZpZXdwb3J0KG9wdHMpO1xuICB9XG4gIHJldHVybiB7fTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncHJvamVjdCcsXG4gIGRlcGVuZGVuY2llczogW2ZwMzJdLFxuICB2czogYCR7cHJvamVjdFNoYWRlcn0ke3Byb2plY3REZXByZWNhdGVkU2hhZGVyfWAsXG4gIGdldFVuaWZvcm1zXG59O1xuIl19