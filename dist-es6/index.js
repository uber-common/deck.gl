// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable max-len */

var experimental = {};

//
// CORE LIBRARY
//

export {
// LIB
COORDINATE_SYSTEM, LayerManager, AttributeManager, Layer, CompositeLayer,

// Viewports
Viewport, WebMercatorViewport, PerspectiveViewport, OrthographicViewport } from './core';

// Deprecated Core Lib Classes
export { assembleShaders } from 'luma.gl'; // Forward the luma.gl version (note: now integrated with Model)

// EXPERIMENTAL CORE LIB CLASSES (May change in minor version bumps, use at your own risk)
import { experimental as CoreExperimental } from './core';

var ViewState = CoreExperimental.ViewState,
    FirstPersonState = CoreExperimental.FirstPersonState,
    OrbitState = CoreExperimental.OrbitState,
    MapState = CoreExperimental.MapState,
    Controller = CoreExperimental.Controller,
    FirstPersonController = CoreExperimental.FirstPersonController,
    FirstPersonViewport = CoreExperimental.FirstPersonViewport,
    OrbitViewport = CoreExperimental.OrbitViewport,
    ThirdPersonViewport = CoreExperimental.ThirdPersonViewport,
    TRANSITION_EVENTS = CoreExperimental.TRANSITION_EVENTS,
    LinearInterpolator = CoreExperimental.LinearInterpolator,
    ViewportFlyToInterpolator = CoreExperimental.ViewportFlyToInterpolator,
    DeckGLJS = CoreExperimental.DeckGLJS,
    MapControllerJS = CoreExperimental.MapControllerJS,
    EffectManager = CoreExperimental.EffectManager,
    Effect = CoreExperimental.Effect;


Object.assign(experimental, {
  // Unfinished controller/viewport classes
  ViewState: ViewState,
  FirstPersonState: FirstPersonState,
  OrbitState: OrbitState,
  MapState: MapState,

  Controller: Controller,
  FirstPersonController: FirstPersonController,

  FirstPersonViewport: FirstPersonViewport,
  OrbitViewport: OrbitViewport,
  ThirdPersonViewport: ThirdPersonViewport,

  // Transition bindings
  TRANSITION_EVENTS: TRANSITION_EVENTS,
  LinearInterpolator: LinearInterpolator,
  ViewportFlyToInterpolator: ViewportFlyToInterpolator,

  // Pure JS (non-React) API
  DeckGLJS: DeckGLJS,
  MapControllerJS: MapControllerJS,

  // Effects base classes
  EffectManager: EffectManager,
  Effect: Effect
});

// Experimental Data Accessor Helpers
// INTERNAL - TODO remove from experimental exports
var TransitionManager = CoreExperimental.TransitionManager,
    extractViewportFrom = CoreExperimental.extractViewportFrom,
    BinSorter = CoreExperimental.BinSorter,
    linearScale = CoreExperimental.linearScale,
    getLinearScale = CoreExperimental.getLinearScale,
    quantizeScale = CoreExperimental.quantizeScale,
    getQuantizeScale = CoreExperimental.getQuantizeScale,
    clamp = CoreExperimental.clamp,
    defaultColorRange = CoreExperimental.defaultColorRange,
    log = CoreExperimental.log,
    get = CoreExperimental.get,
    count = CoreExperimental.count,
    flatten = CoreExperimental.flatten,
    countVertices = CoreExperimental.countVertices,
    flattenVertices = CoreExperimental.flattenVertices,
    fillArray = CoreExperimental.fillArray,
    enable64bitSupport = CoreExperimental.enable64bitSupport,
    fp64ify = CoreExperimental.fp64ify;


Object.assign(experimental, {
  // For react module
  TransitionManager: TransitionManager,
  extractViewportFrom: extractViewportFrom,

  // For layers
  BinSorter: BinSorter,
  linearScale: linearScale,
  getLinearScale: getLinearScale,
  quantizeScale: quantizeScale,
  getQuantizeScale: getQuantizeScale,
  clamp: clamp,
  defaultColorRange: defaultColorRange,

  log: log,

  get: get,
  count: count,

  flatten: flatten,
  countVertices: countVertices,
  flattenVertices: flattenVertices,
  fillArray: fillArray,

  enable64bitSupport: enable64bitSupport,
  fp64ify: fp64ify
});

//
// CORE LAYERS PACKAGE
//

export { ArcLayer, IconLayer, LineLayer, PointCloudLayer, ScatterplotLayer, ScreenGridLayer, GridLayer, GridCellLayer, HexagonLayer, HexagonCellLayer, PathLayer, PolygonLayer, GeoJsonLayer } from './core-layers';

//
// EFFECTS PACKAGE
//

import { default as ReflectionEffect } from './effects/experimental/reflection-effect/reflection-effect';

Object.assign(experimental, {
  ReflectionEffect: ReflectionEffect
});

//
// REACT BINDINGS PACKAGE
//

export { default, DeckGL } from './react';

// TODO - do we need to expose these?
import { MapController, OrbitController, ViewportController // TODO - merge with deck.gl?
} from './react';

Object.assign(experimental, {
  MapController: MapController,
  OrbitController: OrbitController,
  ViewportController: ViewportController
});

//
// EXPERIMENTAL EXPORTS
//

export { experimental };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJleHBlcmltZW50YWwiLCJDT09SRElOQVRFX1NZU1RFTSIsIkxheWVyTWFuYWdlciIsIkF0dHJpYnV0ZU1hbmFnZXIiLCJMYXllciIsIkNvbXBvc2l0ZUxheWVyIiwiVmlld3BvcnQiLCJXZWJNZXJjYXRvclZpZXdwb3J0IiwiUGVyc3BlY3RpdmVWaWV3cG9ydCIsIk9ydGhvZ3JhcGhpY1ZpZXdwb3J0IiwiYXNzZW1ibGVTaGFkZXJzIiwiQ29yZUV4cGVyaW1lbnRhbCIsIlZpZXdTdGF0ZSIsIkZpcnN0UGVyc29uU3RhdGUiLCJPcmJpdFN0YXRlIiwiTWFwU3RhdGUiLCJDb250cm9sbGVyIiwiRmlyc3RQZXJzb25Db250cm9sbGVyIiwiRmlyc3RQZXJzb25WaWV3cG9ydCIsIk9yYml0Vmlld3BvcnQiLCJUaGlyZFBlcnNvblZpZXdwb3J0IiwiVFJBTlNJVElPTl9FVkVOVFMiLCJMaW5lYXJJbnRlcnBvbGF0b3IiLCJWaWV3cG9ydEZseVRvSW50ZXJwb2xhdG9yIiwiRGVja0dMSlMiLCJNYXBDb250cm9sbGVySlMiLCJFZmZlY3RNYW5hZ2VyIiwiRWZmZWN0IiwiT2JqZWN0IiwiYXNzaWduIiwiVHJhbnNpdGlvbk1hbmFnZXIiLCJleHRyYWN0Vmlld3BvcnRGcm9tIiwiQmluU29ydGVyIiwibGluZWFyU2NhbGUiLCJnZXRMaW5lYXJTY2FsZSIsInF1YW50aXplU2NhbGUiLCJnZXRRdWFudGl6ZVNjYWxlIiwiY2xhbXAiLCJkZWZhdWx0Q29sb3JSYW5nZSIsImxvZyIsImdldCIsImNvdW50IiwiZmxhdHRlbiIsImNvdW50VmVydGljZXMiLCJmbGF0dGVuVmVydGljZXMiLCJmaWxsQXJyYXkiLCJlbmFibGU2NGJpdFN1cHBvcnQiLCJmcDY0aWZ5IiwiQXJjTGF5ZXIiLCJJY29uTGF5ZXIiLCJMaW5lTGF5ZXIiLCJQb2ludENsb3VkTGF5ZXIiLCJTY2F0dGVycGxvdExheWVyIiwiU2NyZWVuR3JpZExheWVyIiwiR3JpZExheWVyIiwiR3JpZENlbGxMYXllciIsIkhleGFnb25MYXllciIsIkhleGFnb25DZWxsTGF5ZXIiLCJQYXRoTGF5ZXIiLCJQb2x5Z29uTGF5ZXIiLCJHZW9Kc29uTGF5ZXIiLCJkZWZhdWx0IiwiUmVmbGVjdGlvbkVmZmVjdCIsIkRlY2tHTCIsIk1hcENvbnRyb2xsZXIiLCJPcmJpdENvbnRyb2xsZXIiLCJWaWV3cG9ydENvbnRyb2xsZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBTUEsZUFBZSxFQUFyQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDRTtBQUNBQyxpQkFGRixFQUdFQyxZQUhGLEVBSUVDLGdCQUpGLEVBS0VDLEtBTEYsRUFNRUMsY0FORjs7QUFRRTtBQUNBQyxRQVRGLEVBVUVDLG1CQVZGLEVBV0VDLG1CQVhGLEVBWUVDLG9CQVpGLFFBYU8sUUFiUDs7QUFlQTtBQUNBLFNBQVFDLGVBQVIsUUFBOEIsU0FBOUIsQyxDQUF5Qzs7QUFFekM7QUFDQSxTQUFRVixnQkFBZ0JXLGdCQUF4QixRQUErQyxRQUEvQzs7SUFJRUMsUyxHQXdCRUQsZ0IsQ0F4QkZDLFM7SUFDQUMsZ0IsR0F1QkVGLGdCLENBdkJGRSxnQjtJQUNBQyxVLEdBc0JFSCxnQixDQXRCRkcsVTtJQUNBQyxRLEdBcUJFSixnQixDQXJCRkksUTtJQUdBQyxVLEdBa0JFTCxnQixDQWxCRkssVTtJQUNBQyxxQixHQWlCRU4sZ0IsQ0FqQkZNLHFCO0lBR0FDLG1CLEdBY0VQLGdCLENBZEZPLG1CO0lBQ0FDLGEsR0FhRVIsZ0IsQ0FiRlEsYTtJQUNBQyxtQixHQVlFVCxnQixDQVpGUyxtQjtJQUdBQyxpQixHQVNFVixnQixDQVRGVSxpQjtJQUNBQyxrQixHQVFFWCxnQixDQVJGVyxrQjtJQUNBQyx5QixHQU9FWixnQixDQVBGWSx5QjtJQUVBQyxR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cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cbmNvbnN0IGV4cGVyaW1lbnRhbCA9IHt9O1xuXG4vL1xuLy8gQ09SRSBMSUJSQVJZXG4vL1xuXG5leHBvcnQge1xuICAvLyBMSUJcbiAgQ09PUkRJTkFURV9TWVNURU0sXG4gIExheWVyTWFuYWdlcixcbiAgQXR0cmlidXRlTWFuYWdlcixcbiAgTGF5ZXIsXG4gIENvbXBvc2l0ZUxheWVyLFxuXG4gIC8vIFZpZXdwb3J0c1xuICBWaWV3cG9ydCxcbiAgV2ViTWVyY2F0b3JWaWV3cG9ydCxcbiAgUGVyc3BlY3RpdmVWaWV3cG9ydCxcbiAgT3J0aG9ncmFwaGljVmlld3BvcnRcbn0gZnJvbSAnLi9jb3JlJztcblxuLy8gRGVwcmVjYXRlZCBDb3JlIExpYiBDbGFzc2VzXG5leHBvcnQge2Fzc2VtYmxlU2hhZGVyc30gZnJvbSAnbHVtYS5nbCc7IC8vIEZvcndhcmQgdGhlIGx1bWEuZ2wgdmVyc2lvbiAobm90ZTogbm93IGludGVncmF0ZWQgd2l0aCBNb2RlbClcblxuLy8gRVhQRVJJTUVOVEFMIENPUkUgTElCIENMQVNTRVMgKE1heSBjaGFuZ2UgaW4gbWlub3IgdmVyc2lvbiBidW1wcywgdXNlIGF0IHlvdXIgb3duIHJpc2spXG5pbXBvcnQge2V4cGVyaW1lbnRhbCBhcyBDb3JlRXhwZXJpbWVudGFsfSBmcm9tICcuL2NvcmUnO1xuXG5jb25zdCB7XG4gIC8vIFZpZXcgU3RhdGVzXG4gIFZpZXdTdGF0ZSxcbiAgRmlyc3RQZXJzb25TdGF0ZSxcbiAgT3JiaXRTdGF0ZSxcbiAgTWFwU3RhdGUsXG5cbiAgLy8gQ29udHJvbGxlcnNcbiAgQ29udHJvbGxlcixcbiAgRmlyc3RQZXJzb25Db250cm9sbGVyLFxuXG4gIC8vIFZpZXdwb3J0c1xuICBGaXJzdFBlcnNvblZpZXdwb3J0LFxuICBPcmJpdFZpZXdwb3J0LFxuICBUaGlyZFBlcnNvblZpZXdwb3J0LFxuXG4gIC8vIFRyYW5zaXRpb24gYmluZGluZ3NcbiAgVFJBTlNJVElPTl9FVkVOVFMsXG4gIExpbmVhckludGVycG9sYXRvcixcbiAgVmlld3BvcnRGbHlUb0ludGVycG9sYXRvcixcblxuICBEZWNrR0xKUyxcbiAgTWFwQ29udHJvbGxlckpTLFxuXG4gIEVmZmVjdE1hbmFnZXIsXG4gIEVmZmVjdFxufSA9IENvcmVFeHBlcmltZW50YWw7XG5cbk9iamVjdC5hc3NpZ24oZXhwZXJpbWVudGFsLCB7XG4gIC8vIFVuZmluaXNoZWQgY29udHJvbGxlci92aWV3cG9ydCBjbGFzc2VzXG4gIFZpZXdTdGF0ZSxcbiAgRmlyc3RQZXJzb25TdGF0ZSxcbiAgT3JiaXRTdGF0ZSxcbiAgTWFwU3RhdGUsXG5cbiAgQ29udHJvbGxlcixcbiAgRmlyc3RQZXJzb25Db250cm9sbGVyLFxuXG4gIEZpcnN0UGVyc29uVmlld3BvcnQsXG4gIE9yYml0Vmlld3BvcnQsXG4gIFRoaXJkUGVyc29uVmlld3BvcnQsXG5cbiAgLy8gVHJhbnNpdGlvbiBiaW5kaW5nc1xuICBUUkFOU0lUSU9OX0VWRU5UUyxcbiAgTGluZWFySW50ZXJwb2xhdG9yLFxuICBWaWV3cG9ydEZseVRvSW50ZXJwb2xhdG9yLFxuXG4gIC8vIFB1cmUgSlMgKG5vbi1SZWFjdCkgQVBJXG4gIERlY2tHTEpTLFxuICBNYXBDb250cm9sbGVySlMsXG5cbiAgLy8gRWZmZWN0cyBiYXNlIGNsYXNzZXNcbiAgRWZmZWN0TWFuYWdlcixcbiAgRWZmZWN0XG59KTtcblxuLy8gRXhwZXJpbWVudGFsIERhdGEgQWNjZXNzb3IgSGVscGVyc1xuLy8gSU5URVJOQUwgLSBUT0RPIHJlbW92ZSBmcm9tIGV4cGVyaW1lbnRhbCBleHBvcnRzXG5jb25zdCB7XG4gIC8vIEZvciByZWFjdCBtb2R1bGVcbiAgVHJhbnNpdGlvbk1hbmFnZXIsXG4gIGV4dHJhY3RWaWV3cG9ydEZyb20sXG5cbiAgLy8gRm9yIGxheWVyc1xuICBCaW5Tb3J0ZXIsXG4gIGxpbmVhclNjYWxlLFxuICBnZXRMaW5lYXJTY2FsZSxcbiAgcXVhbnRpemVTY2FsZSxcbiAgZ2V0UXVhbnRpemVTY2FsZSxcbiAgY2xhbXAsXG4gIGRlZmF1bHRDb2xvclJhbmdlLFxuXG4gIGxvZyxcblxuICBnZXQsXG4gIGNvdW50LFxuXG4gIGZsYXR0ZW4sXG4gIGNvdW50VmVydGljZXMsXG4gIGZsYXR0ZW5WZXJ0aWNlcyxcbiAgZmlsbEFycmF5LFxuXG4gIGVuYWJsZTY0Yml0U3VwcG9ydCxcbiAgZnA2NGlmeVxufSA9IENvcmVFeHBlcmltZW50YWw7XG5cbk9iamVjdC5hc3NpZ24oZXhwZXJpbWVudGFsLCB7XG4gIC8vIEZvciByZWFjdCBtb2R1bGVcbiAgVHJhbnNpdGlvbk1hbmFnZXIsXG4gIGV4dHJhY3RWaWV3cG9ydEZyb20sXG5cbiAgLy8gRm9yIGxheWVyc1xuICBCaW5Tb3J0ZXIsXG4gIGxpbmVhclNjYWxlLFxuICBnZXRMaW5lYXJTY2FsZSxcbiAgcXVhbnRpemVTY2FsZSxcbiAgZ2V0UXVhbnRpemVTY2FsZSxcbiAgY2xhbXAsXG4gIGRlZmF1bHRDb2xvclJhbmdlLFxuXG4gIGxvZyxcblxuICBnZXQsXG4gIGNvdW50LFxuXG4gIGZsYXR0ZW4sXG4gIGNvdW50VmVydGljZXMsXG4gIGZsYXR0ZW5WZXJ0aWNlcyxcbiAgZmlsbEFycmF5LFxuXG4gIGVuYWJsZTY0Yml0U3VwcG9ydCxcbiAgZnA2NGlmeVxufSk7XG5cbi8vXG4vLyBDT1JFIExBWUVSUyBQQUNLQUdFXG4vL1xuXG5leHBvcnQge1xuICBBcmNMYXllcixcbiAgSWNvbkxheWVyLFxuICBMaW5lTGF5ZXIsXG4gIFBvaW50Q2xvdWRMYXllcixcbiAgU2NhdHRlcnBsb3RMYXllcixcblxuICBTY3JlZW5HcmlkTGF5ZXIsXG4gIEdyaWRMYXllcixcbiAgR3JpZENlbGxMYXllcixcblxuICBIZXhhZ29uTGF5ZXIsXG4gIEhleGFnb25DZWxsTGF5ZXIsXG5cbiAgUGF0aExheWVyLFxuICBQb2x5Z29uTGF5ZXIsXG4gIEdlb0pzb25MYXllclxufSBmcm9tICcuL2NvcmUtbGF5ZXJzJztcblxuLy9cbi8vIEVGRkVDVFMgUEFDS0FHRVxuLy9cblxuaW1wb3J0IHtkZWZhdWx0IGFzIFJlZmxlY3Rpb25FZmZlY3R9IGZyb20gJy4vZWZmZWN0cy9leHBlcmltZW50YWwvcmVmbGVjdGlvbi1lZmZlY3QvcmVmbGVjdGlvbi1lZmZlY3QnO1xuXG5PYmplY3QuYXNzaWduKGV4cGVyaW1lbnRhbCwge1xuICBSZWZsZWN0aW9uRWZmZWN0XG59KTtcblxuLy9cbi8vIFJFQUNUIEJJTkRJTkdTIFBBQ0tBR0Vcbi8vXG5cbmV4cG9ydCB7XG4gIGRlZmF1bHQgYXMgZGVmYXVsdCxcbiAgRGVja0dMXG59IGZyb20gJy4vcmVhY3QnO1xuXG4vLyBUT0RPIC0gZG8gd2UgbmVlZCB0byBleHBvc2UgdGhlc2U/XG5pbXBvcnQge1xuICBNYXBDb250cm9sbGVyLFxuICBPcmJpdENvbnRyb2xsZXIsXG4gIFZpZXdwb3J0Q29udHJvbGxlciAvLyBUT0RPIC0gbWVyZ2Ugd2l0aCBkZWNrLmdsP1xufSBmcm9tICcuL3JlYWN0JztcblxuT2JqZWN0LmFzc2lnbihleHBlcmltZW50YWwsIHtcbiAgTWFwQ29udHJvbGxlcixcbiAgT3JiaXRDb250cm9sbGVyLFxuICBWaWV3cG9ydENvbnRyb2xsZXJcbn0pO1xuXG4vL1xuLy8gRVhQRVJJTUVOVEFMIEVYUE9SVFNcbi8vXG5cbmV4cG9ydCB7ZXhwZXJpbWVudGFsfTtcbiJdfQ==