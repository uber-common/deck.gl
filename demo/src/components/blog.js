import React, {Component, PropTypes} from 'react';
import autobind from 'autobind-decorator';

/*
 * This component wraps the static content generated by Jekyll
 * from the `blog` branch.
 * The route #/blog/path/to/content is rendered by this component
 * with an iframe containing ./blog/path/to/content.html
 * This allows the blog to use the same page layout as the rest
 * of the site.
 */
export default class Blog extends Component {

  // There are two types of navigation
  // Nav type 1 - from route, need to navigate iframe to specified page
  componentWillReceiveProps(nextProps) {
    const nextUrl = this._getUrlFromRoute(nextProps);
    if (nextUrl !== this._loadedUrl) {
      this.refs.frame.contentWindow.location.href = `.${nextUrl}.html`;
    }
  }

  shouldComponentUpdate(nextProps) {
    // Setting iframe.src is not reliable, use contentWindow.location instead
    // Rerender will cause page to load twice
    return false;
  }

  // Nav type 2 - from user click within the iframe,
  // Need to capture the loaded url and update route
  @autobind _onPostLoaded(evt) {
    const loadedUrl = evt.target.contentWindow.location.href;

    this._loadedUrl = loadedUrl
      .slice(loadedUrl.indexOf('/blog/'))
      .replace('.html', '');

    if (this.props.location.pathname !== this._loadedUrl) {
      // update route to match the current url
      this.context.router.push(this._loadedUrl);
    }

    // traverse all <a> elements
    // in the child page and target external links to the parent window
    const anchors = evt.target.contentDocument.getElementsByTagName('a');

    for (let i = 0; i < anchors.length; i++) {
      const anchor = anchors[i];
      if (anchor.getAttribute('href')[0] !== '.') {
        // is external link
        anchor.target = '_parent';
      }
    }
  }

  _getUrlFromRoute(props) {
    // redirect /blog and /blog/ to /blog/latest
    const {location: {pathname}} = props;
    return pathname.length > 6 ? pathname : '/blog/latest';
  }

  render() {
    const url = this._getUrlFromRoute(this.props);

    return (
      <div className="blog-page">
        <iframe ref="frame" src={`.${url}.html`} onLoad={ this._onPostLoaded } />
      </div>
    );
  }
}

Blog.contextTypes = {
  router: PropTypes.object
};
